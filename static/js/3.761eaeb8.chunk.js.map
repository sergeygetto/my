{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogElem/DialogElem.jsx","components/Dialogs/MessagesElem/MessagesElem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogElem","props","className","el","elem","to","id","activeClassName","active","avatar","src","img","name","MessagesElem","messages","maxLength50","maxFieldLengthCreator","MessagesReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredFieldValidationForm","Dialogs","dialogsItem","dialogs","map","messagesItem","values","sendNewMessages","newMessagesBody","compose","connect","state","dialogsPage","initialMessagesText","dispatch","withAuthRedirect"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,OAAS,wBAAwB,OAAS,0B,qHCoB7GC,EAhBI,SAACC,GAMhB,OACA,sBAAKC,UAAWC,IAAGC,KAAnB,cAA0B,eAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAKC,gBAAiBJ,IAAGK,OAA1D,UACtB,qBAAKN,UAAYC,IAAGM,OAAQC,IAAKT,EAAMU,MADjB,IAC0BV,EAAMW,KADhC,aCAfC,EARK,SAACZ,GACjB,OACA,sBAAKC,UAAWC,IAAGW,SAAnB,cAA+Bb,EAAMa,SAArC,Q,kCC+BAC,EAAcC,YAAsB,IAgBjCC,EAAoBC,YAAU,CAClCC,KAAM,eADkBD,EAfN,SAACjB,GACpB,OACF,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACY,8BACE,cAACC,EAAA,EAAD,CACEC,YAAa,eAAgBX,KAAM,kBACnCY,UAAWC,IAAUC,SAAU,CAACC,IAA8BZ,OAElE,8BAEE,kDASCa,EAhDC,SAAC3B,GACf,IAAI4B,EAAc5B,EAAM6B,QAAQC,KAAI,SAAC3B,GAAD,OAClC,cAAC,EAAD,CAA0BQ,KAAMR,EAAKQ,KAAMN,GAAIF,EAAKE,GAAIK,IAAKP,EAAKO,KAAjDP,EAAKE,OAGpB0B,EAAe/B,EAAMa,SAASiB,KAAI,SAAC3B,GAAD,OACpC,cAAC,EAAD,CAA4BU,SAAUV,EAAKU,UAAxBV,EAAKE,OAO1B,OACE,mCACE,sBAAKJ,UAAWC,IAAG2B,QAAnB,UACE,qBAAK5B,UAAU,aAAf,SAA6B2B,IAC7B,sBAAK3B,UAAU,eAAf,UACG8B,EACD,8BACA,cAACf,EAAD,CAAmBG,SAXC,SAACa,GAC3BhC,EAAMiC,gBAAgBD,EAAOE,+BCMlBC,sBACbC,aAlBsB,SAACC,GACvB,MAAO,CACLR,QAAUQ,EAAMC,YAAYT,QAC5BhB,SAAWwB,EAAMC,YAAYzB,SAC7B0B,oBAAsBF,EAAMC,YAAYC,wBAIjB,SAACC,GAE1B,MAAO,CAELP,gBAAkB,SAACC,GAAD,OAAqBM,EAASP,YAAgBC,SAOlEO,IAFaN,CAGbR","file":"static/js/3.761eaeb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3MN_N\",\"elem\":\"Dialogs_elem__35cip\",\"active\":\"Dialogs_active__2_j0z\",\"avatar\":\"Dialogs_avatar__3A1pK\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport el from './../Dialogs.module.css'\r\n\r\n\r\nconst DialogElem = (props) =>{\r\n// let newRefs = React.createRef();\r\n// let newAlert =() =>{\r\n// alert( newRefs.current.value)    \r\n//}\r\n\r\n    return(\r\n    <div className={el.elem}> <NavLink to={'/dialogs/' + props.id } activeClassName={el.active} >\r\n        <img className ={el.avatar} src={props.img} /> {props.name}   </NavLink> \r\n    \r\n    </div> \r\n    \r\n    )\r\n}\r\n\r\n\r\nexport default DialogElem","import React from 'react'\r\nimport el from './../Dialogs.module.css'\r\n\r\n\r\nconst MessagesElem =(props) =>{\r\n    return(\r\n    <div className={el.messages}> {props.messages} </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MessagesElem","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport DialogElem from \"./DialogElem/DialogElem\";\r\nimport el from \"./Dialogs.module.css\";\r\nimport MessagesElem from \"./MessagesElem/MessagesElem\";\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxFieldLengthCreator, requiredFieldValidationForm } from \"../../utilits/validation\";\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsItem = props.dialogs.map((elem) => (\r\n    <DialogElem key={elem.id} name={elem.name} id={elem.id} img={elem.img} />\r\n  ));\r\n\r\n  let messagesItem = props.messages.map((elem) => (\r\n    <MessagesElem key={elem.id} messages={elem.messages} />\r\n  ));\r\n\r\n  const onSubmitAddMessages = (values) =>{\r\n    props.sendNewMessages(values.newMessagesBody) \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={el.dialogs}>\r\n        <div className=\"dialogElem\">{dialogsItem}</div>\r\n        <div className=\"messagesElem\">\r\n          {messagesItem}\r\n          <div>\r\n          <MessagesReduxForm onSubmit={onSubmitAddMessages} />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nlet maxLength50 = maxFieldLengthCreator(50)\r\nconst MessagesForm = (props) => {\r\n  return (\r\n<form onSubmit={props.handleSubmit}>  \r\n            <div>  \r\n              <Field\r\n                placeholder={\"send message\"} name={'newMessagesBody'} \r\n                component={Textarea} validate={[requiredFieldValidationForm , maxLength50]} />\r\n            </div>\r\n            <div>\r\n            \r\n              <button >Send</button>\r\n            </div>\r\n            </form>\r\n  )}\r\n\r\n const MessagesReduxForm = reduxForm({\r\n   form: 'addMessages'\r\n }) (MessagesForm)\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport {\r\n  sendNewMessages\r\n} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst mapStateToProps = (state)  => {\r\n  return {\r\n    dialogs : state.dialogsPage.dialogs,\r\n    messages : state.dialogsPage.messages,\r\n    initialMessagesText : state.dialogsPage.initialMessagesText,\r\n    \r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n  return {\r\n  \r\n    sendNewMessages : (newMessagesBody) => dispatch(sendNewMessages(newMessagesBody))\r\n\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n// const DialogsContainer = () => {\r\n  \r\n//   return (\r\n//     <StoreContext.Consumer>\r\n// { store => {\r\n//     let state = store.getState();\r\n\r\n//     let changeNewMessagesTEXT = (body) => {\r\n//       let action = changeNewMessagesText(body);\r\n//       store.dispatch(action);\r\n//     };\r\n//     let sendNewMESSAGES = () => {\r\n//       store.dispatch(sendNewMessages());\r\n//     };\r\n  \r\n//    return <Dialogs\r\n//       changeNewMessagesText={changeNewMessagesTEXT}\r\n//       sendNewMessages={sendNewMESSAGES}\r\n//       dialogs={state.dialogsPage.dialogs}\r\n//       messages={state.dialogsPage.messages}\r\n//       initialMessagesText={state.dialogsPage.initialMessagesText}\r\n//     />\r\n// }}\r\n//   </StoreContext.Consumer>\r\n//   );\r\n// };\r\n"],"sourceRoot":""}